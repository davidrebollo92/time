{"mappings":"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","sources":["src/index.ts"],"sourcesContent":["export class Time extends Date {\n   constructor(date?: string | Date) {\n      if (date) {\n         if (typeof date == \"string\") super(new Date(date));\n         else super(date);\n      } else super(new Date());\n   }\n\n   isValid() {\n      return !isNaN(this.getTime());\n   }\n\n   day() {\n      return this.getUTCDate();\n   }\n\n   daysInMonth() {\n      return new Date(this.year(), this.month(), 0).getDate();\n   }\n\n   month() {\n      return this.getUTCMonth() + 1;\n   }\n\n   year() {\n      return this.getUTCFullYear();\n   }\n\n   startOfDay() {\n      return new Time(new Date(this.format(\"YYYYMMDD\", \"-\")));\n   }\n\n   add(amount: number, unit: \"days\" | \"months\" | \"years\") {\n      switch (unit) {\n         case \"days\":\n            this.setDate(this.getDate() + amount);\n            return this;\n         case \"months\":\n            this.setMonth(this.getMonth() + amount);\n            return this;\n         case \"years\":\n            this.setFullYear(this.getFullYear() + amount);\n            return this;\n      }\n   }\n\n   subtract(amount: number, unit: \"days\" | \"months\" | \"years\") {\n      switch (unit) {\n         case \"days\":\n            this.setDate(this.getDate() - amount);\n            break;\n         case \"months\":\n            this.setMonth(this.getMonth() - amount);\n            break;\n         case \"years\":\n            this.setFullYear(this.getFullYear() - amount);\n            break;\n      }\n\n      return this;\n   }\n\n   isBefore(date: Time | string) {\n      if (typeof date == \"string\") date = new Time(date);\n\n      if (this < date) return true;\n      else return false;\n   }\n\n   isAfter(date: Time | string) {\n      if (typeof date == \"string\") date = new Time(date);\n\n      if (this > date) return true;\n      else return false;\n   }\n\n   isSameOrBefore(date: Time | string) {\n      if (typeof date == \"string\") date = new Time(date);\n\n      if (this <= date) return true;\n      else return false;\n   }\n\n   isSameOrAfter(date: Time | string) {\n      if (typeof date == \"string\") date = new Time(date);\n\n      if (this >= date) return true;\n      else return false;\n   }\n\n   isBetween(startDate: Time | string, endDate: Time | string, rule: \"()\" | \"(]\" | \"[)\" | \"[]\") {\n      if (typeof startDate == \"string\") startDate = new Time(startDate);\n      if (typeof endDate == \"string\") endDate = new Time(endDate);\n\n      switch (rule) {\n         case \"()\":\n            return this > startDate && this < endDate;\n         case \"(]\":\n            return this > startDate && this <= endDate;\n         case \"[)\":\n            return this >= startDate && this < endDate;\n         case \"[]\":\n            return this >= startDate && this <= endDate;\n      }\n   }\n\n   diff(date: Time | string, unit: \"minutes\" | \"days\" | \"months\" | \"years\") {\n      let diff;\n\n      if (typeof date == \"string\") date = new Time(date);\n\n      switch (unit) {\n         case \"minutes\":\n            diff = this.diffInMinutes(date);\n            break;\n         case \"days\":\n            diff = this.diffInDays(date);\n            break;\n         case \"months\":\n            diff = this.diffInMonths(date);\n            break;\n         case \"years\":\n            diff = this.diffInYears(date);\n            break;\n      }\n\n      return diff;\n   }\n\n   clone() {\n      return new Time(this);\n   }\n\n   format(rule: \"YYYYMMDD\" | \"DDMMYYYY\" | \"YYMMDD\" | \"DDMMYY\", separator?: \"\" | \"-\" | \"/\") {\n      if (!separator) separator = \"\";\n\n      const day = this.day() > 9 ? this.day().toString() : 0 + this.day().toString();\n      const month = this.month() > 9 ? this.month().toString() : 0 + this.month().toString();\n      const year = this.year().toString();\n\n      switch (rule) {\n         case \"YYYYMMDD\":\n            return year + separator + month + separator + day;\n         case \"DDMMYYYY\":\n            return day + separator + month + separator + year;\n         case \"YYMMDD\":\n            return year.substring(2) + separator + month + separator + day;\n         case \"DDMMYY\":\n            return day + separator + month + separator + year.substring(2);\n      }\n   }\n\n   private diffInMinutes(date: Time | string) {\n      if (typeof date == \"string\") date = new Time(date);\n\n      let diff = (this.getTime() - date.getTime()) / 1000;\n      diff /= 60;\n\n      return Math.round(diff);\n   }\n\n   private diffInDays(date: Time | string) {\n      if (typeof date == \"string\") date = new Time(date);\n\n      const _MS_PER_DAY = 1000 * 60 * 60 * 24;\n\n      const utc1 = Date.UTC(date.getFullYear(), date.getMonth(), date.getDate());\n      const utc2 = Date.UTC(this.getFullYear(), this.getMonth(), this.getDate());\n\n      return Math.floor((utc2 - utc1) / _MS_PER_DAY);\n   }\n\n   private diffInMonths(date: Time | string) {\n      if (typeof date == \"string\") date = new Time(date);\n\n      let months;\n\n      months = (this.getFullYear() - date.getFullYear()) * 12;\n      months -= date.getMonth();\n      months += this.getMonth();\n\n      return months;\n   }\n\n   private diffInYears(date: Time | string) {\n      if (typeof date == \"string\") date = new Time(date);\n\n      return this.getFullYear() - date.getFullYear();\n   }\n}\n"],"names":[],"version":3,"file":"index.mjs.map"}